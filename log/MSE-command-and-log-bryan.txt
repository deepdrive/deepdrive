Notes:
- Synchronous: 
- Eval-only: whether to run evaluation or run gradient updates
- Agent vs Baseline: 
- Image Resize: argument needed for mnet (224x224) (I tried with many dimensions and it still ran)

Log:

11-28/11-29
1) Activate the deepdrive conda environment
source activate dd 

2) Catch up on Michael's work
a) Run the agents from the tutorial
$ python example.py
- drives forward; stops on crash or after ~5 seconds (because it goes through one env step); failed once with an "unknown network error"

$ python example_sync.py
--> drives forward; doesn't stop on crash; 

b) Run the baseline agents

$ python main.py --mnet2-baseline 
--> Runs around the track

$ python main.py --ppo-baseline
--> Runs around the track

c) Experiment with arguments
$ python main.py --agent dagger_mobilenet_v2 --max-steps=100 --max-episodes=1 --eval-only --scenario=2 --map=kevindale_bare --camera-rigs=default_rig_1080p --image-resize-dims="[224,224,3]"

$ python main.py --agent dagger_mobilenet_v2 --max-steps=100 --max-episodes=1 --eval-only --scenario=2 --map=kevindale_bare --camera-rigs=default_rig_1080p --image-resize-dims="[224,1000,3]"

$ python main.py --agent dagger_mobilenet_v2 --max-steps=100 --max-episodes=1 --eval-only --scenario=2 --map=kevindale_bare --camera-rigs=default_rig_1080p 
--> All of these run fine, despite image resize dim changes

$ python main.py --agent dagger --max-steps=100 --max-episodes=1 --eval-only --scenario=2 --map=kevindale_bare --camera-rigs=default_rig_1080p --image-resize-dims="[224,224,3]"
--> checkpoint error; a key not found in dagger/agent.py

$ python main.py --agent bootstrapped_ppo2 --max-steps=100 --max-episodes=1 --eval-only --scenario=2 --map=kevindale_bare --camera-rigs=default_rig_1080p --image-resize-dims="[1440,1440,3]"
--> This runs

d) Training the agent
$ python main.py --train --agent bootstrapped_ppo2 --recording-dir ~/Deepdrive/data/tfrecords --image-resize-dims="[1440,1440,3]"
--> Successfully runs

e) Running the code on a server
$ python main.py --server --max-steps=1440 --max-episodes=1 --map=kevindale_bare --camera-rigs=default_rig_1080p --image-resize-dims="[224,224,3]"
$ python ~/deepdrive/agents/forward_agent.py
--> Same code as Michael's. The first in one terminal and the second in another. This works well. (The former uses deepdriver_api/server.py
--> and the latter uses deepdriver_api/client.py)

3) Docker 
a) Installed Docker 
-->Instructions for installing Docker, adding groups, etc: https://www.linux.com/tutorials/how-install-and-use-docker-linux/
Obtained error: "Failed to start docker.service: Unit docker.service is masked."
-->Solved with this: https://www.artificialworlds.net/blog/2015/07/17/docker-fails-to-start-on-ubuntu-15-04/
-->Used these commands: systemctl unmask docker.service; systemctl unmask docker.socket; systemctl start docker.service
$ docker run hello-world
--> success; Outputs "Hello from Docker!"

b) Build a docker image of forward agent
$ cd ~/deepdrive/agents/forward_agent
$ docker built -t forward_agent .
--> Michael's second command didn't work for me. Instead I used the build command from the docs: https://docs.docker.com/get-started/part2/
$ docker image build -t forward_agent .
--> Successfully built container

c) Run Michael's Docker code 
$ cd ~/deepdrive; $ make build; $ docker images
--> Uses makefile to build deepdrive image; successfully shows deepdrive image 
$ cd ~/deepdrive/botleague/problems/unprotected_left; $ make build; $ docker images
--> Builds unprotected left; docker lists the newly created image

4) Leaderboard submission and creating a Docker Hub
a) Fixed leaderboard submission (for submissions in general; none worked previously)
Tried leaderboard submission with deepdrive instructions (https://docs.deepdrive.io/docs/tutorial/leaderboard/leaderboard) but failed. 
Even default deepdrive tutorial code failed. Cut the additional files from the "botleague/problems/deepdrive/unprotected_left" folder. Files moved to 
"/home/paperspace/deepdrive/botleague/problems/unprotected_left".
--> Fixed the submission issue

b) Completed leaderboard submissions for our code (i.e. not Craig's default code from his repo)
Craig from Deepdrive mentioned submissions are obtained via docker pull. This requires a Docker Hub. Account created via 
(https://ropenscilabs.github.io/r-docker-tutorial/04-Dockerhub.html). Login is bryanlee99, y5EH5S6dms, bryanlee@college.harvard.edu. 
Repo for deepdrive project is bryanlee99/deepdrive 
$ docker login -u=bryanlee99 -p=y5EH5S6dms
--> Logs in to Docker Hub

$ cd ~/deepdrive/agents/forward_agent 
$ docker build -t bryanlee99/deepdrive:left-agent .
--> Successfully tagged the forward_agent and saved it into the bryanlee99/deepdrive Docker repo

$ docker images 
--> Shows created images. The first image has bryanlee99/deepdrive as the repo and left-agent as the tag, as desired 

Modified bot.json (/home/paperspace/botleague/bots/memanuel/forward-agent/bot.json) to use docker_tag "bryanlee99/deepdrive:left-agent"
Submitted this to the deepdrive server. (git push and submit a pull request, as the tutorial suggests https://docs.deepdrive.io/docs/tutorial/leaderboard/leaderboard)
--> Submission successful; scored -20k

Modified the forward agent's agent.py to be identical to lazydriver's GitHub code (who's best score is -10k) from https://github.com/lazydriver/deepdrive-challenge/blob/master/unprotected_left/agent.py.
--> Submission successful; scored -18.5k

c) Consolidated code to build and submit general agents. Steps for the 'forward_agent' folder are below, but this is generalizable:
Note: I created a build.sh file which builds the Dockerfile, and pushes the built image to the 'bryanlee99/deepdrive' repo wit tag "left-agent"

$ cd ~/deepdrive/agents/forward_agent
--> Navigate to the forward_agent directory
- Modify the agent.py code to custom navigation

$ bash build.sh 
--> Runs the build shell command; builds the docker image (with the new agent.py), and pushes the image to the 'bryanlee99/deepdrive' repo

$ cd ~/botleague/bots/memanuel/forward-agent
--> Navigates to 'bot.json' file. Add or delete a new line to the file so github will allow a recommit. 
--> Do a pull request as normal to score the new submission 

d) Link to view results 
Viewing results: Leaderboard only shows each contestant's best score. Full scores and run results
are found here: https://gist.github.com/botleague-results

